LLD ideas

https://github.com/bizzlebin/team/blob/master/lld_ideas.txt

***

By Zachary Wawrzaszek, et al

***

Created on 2020-05-28

Updated on 2020-06-15

+++
Description

This is where we will be adding our ideas for the construction of our low level design document

+++
Database Information

The database language we will be using is SQLite, since it is a file based database it will help out overall since we are dealing with file tagging. I want to discuss access control for the database, since we are dealing with HIPAA and insurance companies in general it is very important that the information that is being processed has strict access and control to that information when it is needed. So by putting in these standards for controlling access, only the trusted Database Administrator shall be in charge of accessing certain information. There a couple access controls we can follow that best suit this project and it is called Mandatory Access Control (MAC) or Role Based Access Control (RBAC). With MAC being a nondiscretionary model which means that people are granted access based on an information clearance, so that means the rights are assigned based on central authority regulations. RBAC on the other hand grants access to people with certain security priviliges such as "least privilege" and "seperation of privilege", so they can only access information based on their role. 

As far as SQLite and creating instances of a database, since our application is based on insurance it is best to create any back up information so that nothing happens to the database itself when you access it from your computer. We should have an instance for creating a table based on that insurance clients information like their SSN and date of birth and so that this will mainly be in charge of holding the clients information on an instance. I was also thinking that we should create an instance for production which is used to contain live data for producing any information. The next instance that follows that is also pre-production which is in charge of testing new functionality before the product is released so this way we can organize what kind of functionality requirements that we should work on. Lastly following is a development instance where database developers create new functionality from the previous pre production functionalities so that can continue on to production of the product. 

===

+++
Testing Scenarios

• Unit Testing is primarily the Developers job, but it is Teams responsiblity to make sure the developer receives proper instructions and guidance that the application is properly tested. So the developer needs to test each part of the application individually for bugs that they must have missed, the developer may do this by using breakpoints by going through every other line of code to find the bug that should be fixed before moving onto the next testing phase. Team needs to give the developer the proper tools/framework to help them with the job so they can continue and debug. The testing should not involve test cases for everything, it should focus on the tests that impact the behavior of the system for example, if there is a bug in the processing of tags being sent, find out why this is the issue, is it being sent to right database? etc. The testing scenarios that team should implement should not overlap, meaning test cases should be written independent of each other. For example, if one of the classes interacts with the database that deals with tags then it is best not write a case that interacts with the database but to create an abstract interface around the database connection and then create a mock object for that test. Its important to ask questions when having the unit test, for example, Is there a bug on line ### that is interfering with another bug on line ###? Are the requirements functioning as they should be in the program, if not then find the error. The best thing to do when testing is to implement any future proof bugs when writing psuedocode so that the team has an idea on what might need to be fixed. 

• Integration Testing has 2 ways that the testing can be done during integration, it can have a top-down approach or a bottom-up approach. Both are very good ways of detecting issues with the software, so Team can implement both into their project. Team needs to start with a top down approach of the system, they need to grab all the unit tests created from step 1 and start at the bottom and work their way up, this technique is perfect if the program has a major fault at the lowest unit of the program. In Teams case the interfaces being tested are the UI, database and client servers. The UI needs to be tested to for the interface link so that the user can login in to the page. The search bar needs to be tested so that when the user is typing the information once the user hits search and the information pops up. The testing of the file directory to implement tags needs to be tested so that the file tagging system knows that the interface link between the file explorer possibly. 


• System Testing is a type of testing that comes after integration testing, in this test it is important that you test all of the requirements that were posted for the project, including the SRS, HLD and LLD. Since Team already has all the requirements listed in a version control system, the best thing to do is specify the types of test they need to work on whether it will be functional, non-functional, user interface and security related issues because all of these will be covered during system testing. Since there are a lot of requirements, the best thing to do in this case is write system test cases which means an excel spreadsheet of a description. Those descriptions are Test Case ID, Test Suite name, describe the test case to be executed. Step by step procedure to describe how to perform testing of the project. Providing Test Data which means Dummy data that is prepared to test the application. The Expected result as per the requirement document is provided in this column. The actual Result after the execution of the test case is provided in this column. Creating a Pass/Fail comparison in actual & expected result defines the Pass/fail criteria. And lastly Remarks. This format will be used to check each of the type of requirement and then organize and test those areas to check if anything is missed in the previous steps. 


• Acceptance Testing is the type of test that goes over the business requirements of the SRS and much more. Since this application will not be going into market it will not be in much detail. The testing performed in this phase is usually very similar to system testing since most of the stuff is repeated but in this case the testers are customers, etc. The six steps to take for this plan are analysis of business requirements, which means to look over the documents that were created like the business use cases, the project charter, process flow diagrams, BRD and the SRS. Step 2 is the creation of the plan, it outlines the strategy that will be used to verify and ensure the app meets its business requirements. It also documents entry and exit criteria for the user acceptance testing, test scenarios and test cases approach and timeline of testing. Step 3 is to identify test scenarios and use cases with respect to the high level business process create test cases with clear test steps. Test Cases should sufficiently cover most of the UAT scenarios. Business Use cases are input for creating the test cases. Step 4 is the prepartion of the Test Data. Step 5 is to run and record the results, this means execute test cases and report bugs if there are any left. Re-test the bugs once fixed and use test management tools. Lastly, step 6 is to confirm the business objectives get met, this is when sign off occurs and it is good to go for production and the deliverables for test plan, UAT scenarios and test cases, test results and defect log. Lastly, before moving into production there are things to consider like checking for no critical defects, business processes work satisfactorily, and UAT (user acceptance testing) Sign off. 

===

Tables

**user**: uuid (PK: int), name (str), creation_date (date), group.name (FK: str), salt (str), hash (str), update_date (date)
**group**: uuid (PK: int), name (str), c_tag (bool), u_tag (bool), r_tag (bool), d_tag (bool), c_user (bool), u_user (bool), r_user (bool), d_user (bool), c_group (bool), u_group (bool), r_group (bool), d_group (bool)
**filetag**: uuid (PK: int), path (str), name (str), ext (str), tag.name (FK: str), dead (bool)
**tag**: uuid (PK: int), name (str), description (str)
**userhistory**: uuid (PK: int), user.name (FK: str), tag.name (FK: str), count (int)

+++
Class Ideas

Zachary Wawrzaszek

• Add a third level of user class that will handle all user creation and privilege methods. The mid level user class can delete and edit tags. The lowest level user can only create and search for tags. We can move around which permissions we think each level should have.

===
Stavros Bannoura

• Add a tag class that handles the file tagging information and data to transfer. 
• Team needs a communication class that can handle the HTTP(S) requests and communication
• A database helper class that can handle the translation requests from the DB language we are using
• Add a Server class that will mainly be in charge of running the application to be available to users and has a relation to the database
• Add a database access class

===
Anna Malmberg

• A "master" tag class that can access/display all the tags related to one document, it could have information about when each tag was created and by whom etc. This could assist in auditing processes. Not sure if this would be more fitting for a method?

===
Jeremiah Thomas

• Add a Main class, which calls the GUI and interacts with the user(s) and DB

+++
Chosen Listed Class Ideas

• Add a third level of user class that will handle all user creation and privilege methods. The mid level user class can delete and edit tags. The lowest level user can only create and search for tags. We can move around which permissions we think each level should have.
• Add a Main class, which calls the GUI and interacts with the user(s) and DB
• A "master" tag class that can access/display all the tags related to one document, it could have information about when each tag was created and by whom etc. This could assist in auditing processes. Not sure if this would be more fitting for a method?
• Team need a communication class that can handle the HTTP(S) requests and communication
• Add a Server class that will mainly be in charge of running the application to be available to users and has a relation to the database
• A database helper class that can handle the translation requests from the DB language we are using
• Database access class

+++
General Ideas

===
Jeremiah Thomas

• Make a list of common SQLite commands (maybe in docs/?)
• Determine which DB fields can't be null
• Clarify more about which "leg" we're using in Scope (read Ms Halliday's response; we may want another [domain] diagram for the HLD reflecting the current architecture and separation of concerns—with or without a focus on the classes)

===
Stavros Bannoura

• Possibly add tag info, when and who created the tag in the database.
• To possibly get classes in psuedocode, we should follow our UML diagrams and determine the class names first then determine what that class will do, will it be a private instance variable? will that class rely on an extension of another class? What will be the superclass and subclasses?
• To get the database into pseudocode we need to also follow our database table, We should also possibly start by writing the creation of the tables and declaring primary and foreign keys. That will also be in charge of knowing what will be part of a join and what will not be dependent one each other. Then if that table is in charge of a join, we implement the psuedocode that allows the join of a specific table.

===
Anna Malmberg

• We could create some pseudo code in the form of flow charts, that may be easier to follow than just text based.
• Method for creating user accounts, including how the userID should be created for log in.
• Specifics for how the the reports are run and what information they will contain (tag name, created by, created date...?)



