SRS ideas 

https://github.com/bizzlebin/team/srs_ideas.txt

***

By Sandhya Joshi

***

Created on 2020-05-28

Updated on 2020-06-01

+++
Description

This is where we will be adding our ideas for the construction of our high level design document


Who, what when where, why and how 

===
Anna Malmberg

Business requirements:
• Insurance agent shall be able to log in to the system and find related documents by using keywords related to the client or project
• System shall create a client and project specific tags when a new client or project is created
• Managers shall be able to create additional tags that their group requires
• Tags shall stay assigned to document if moved to a different project or directory
• Project relevant tags shall be assigned to any document that is added to a tagged project folder
• System assigned tags shall only be deleted by managers, agent assigned tags may be deleted by agent
• Tags shall not allow users to access documents that they do not have permissions to access

Functional requirements:
• Administrator log in shall be required to manage the tag database
• Windows log in shall be recognized when adding tags to shared files or folders

Non-functional requirements:
• System shall produce a report that lists number of current tags, showing days since last used and number of current documents using tag

Interface requirements:
• User interface for adding personal tags shall be on mouse-right-click drop down
• User interface for managing personal tags shall require log in
• User Interface shall offer options for personalized color schemes for tags

Performance requirement:
• System shall keep all tags until deleted by user or administrator
• System shall not impact performance of other applications

===

Stavros Bannoura

1. SRS Ideas.
1.1. Propose at least 1 business requirement (SRS 3; please keep it to clear but concise bullet points as far as possible).
-Should effectively create a file tag management system that ensures reliability, usability and intuitive capabilities and features. 
-This means a user should be capable of learning how to use the system fairly quickly so that the user can get on to the important stuff.

1.2. Propose at least 1 functional requirement (SRS 4).
-What are the main features that we want for this application? 
-How can prioritize the feature list? (following MOSCOW)

1.3. Propose at least 1 non-functional requirement (SRS 5).
-How can we make the system reliable? What are the implications to take?
-What can we do to make the app secure?
-The application must be able to support users effectively organizing files. 

1.3. Propose at least 1 interface requirement (SRS "6" (numbering is borked)).
-How can we smoothly connect to other databases?
-What type of inheritance will we be using? 

1.3. Propose at least 1 performance requirement (SRS "7").
-How much possible capacity can the database hold?
-Whats the type of speed that we want for this application?
-How will we optimize the application to be effective?


	
