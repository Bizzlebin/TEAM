SRS Final | TEAM Exists As Metonym

https://github.com/bizzlebin/team/blob/master/docs/srs_draft.txt

***

By Sandhya Joshi, et al

***

Created on 2020-06-04

Updated on 2020-07-16

Released on 2020-07-22

+++
Table Of Contents

1. Introduction
1.1. Purpose
1.2. Scope Of This Document
1.3. Definitions, Acronyms, And Abbreviations
1.4. Overview
1.5. Business Context
2. General Description
2.1. Product Features/Functions
2.2. User Characteristics
2.3. General Constraints
2.4. Collaboration Tools
2.4.1. Communication
2.4.2. Document Storage And Control
2.4.3. File Sharing And Management
2.4.4. Project Management
2.4.5. Version Control Of Documents
2.4.6. Strengths and Weaknesses
3. Business Requirements
4. Functional Requirements
5. Interface Requirements
5.1. User Interfaces
5.1.1. GUI
5.1.2. CLI
5.1.3. API
5.2. Hardware Interfaces
5.3 Communication Interfaces
5.4 Software Interfaces
6. Performance Requirements
7. Other Non-Functional Attributes
7.1. Security
7.2. Reliability
7.3. Maintainability
7.4. Portability
7.5. Resource Utilization
7.6. Serviceability
8. Operational Scenarios
8.1. Scenario A
8.2. Scenario B
8.3. Scenario C
9. Use Case And User Stories
9.1. Use Case
9.1.1. B1 UC01
9.1.2. B2 UC01
9.1.3. Use Case Diagram
9.2. User Stories
9.2.2. User Stores Per Functional Requirement
9.2.1. User Stories Per Business Requirement
10. Sequence Diagrams
10.1. Sequence Diagram Of Requirements I1 And N5
10.2. Sequence Diagram Of Requirement N2
11. Appendices
11.1. MOSCOW
11.2. Procedures For Project Requirement Changes
11.2.1. Example Change
11.3. Schedule
11.4. Requirements Traceability Matrix
11.5. Verification And Validation Testing Document

+++
1. Introduction

**Team name**: TEAM Exists As Metonym

**Project manager**: Jeremiah Thomas
**Documentation specialist**: Anna Malmberg
**Customer advocate**: Sandhya Joshi
**Lead software developer**: Zachary Wawrzaszek
**Lead tester**: Stavros Bannoura

===
1.1. Purpose

The purpose of this document is to build an application system, called Tagit.FM, that will enhance the search capabilities in MHC's database system. The tag-based file manager system stores metadata in the form of custom tags in a separate database instead of working directly in an operating system's limited file manager. The program searches tags and displays the most recent searches to ensure continuity and clarity.

===
1.2. Scope Of This Document

The intended readers of this document are current and future developers working on "Tagit.FM", hereafter referred to as the TEAM, and the developers at MHC. The plan will include, but is not restricted to, a summary of the system functionality, the scope of the project from the perspective of the team. This document specifies the business requirements, functional and non-functional requirements, interface requirements, operational scenarios, user stories, sequence diagrams, scheduling and delivery estimates, project risks and how those risks will be mitigated, the processes by which the project will be developed, and metrics and measurements that will be recorded throughout the project.

===
1.3. Definitions, Acronyms, And Abbreviations

**ACID**: Atomicity, consistency, isolation, durability
**API**: Application programming interface
**Customer**: A person who uses services provided by the insurance company
**CLI**: Command line interface; a text-based interface used for entering commands
**DBMS**: Database management system
**Git**: Distributed version-control system used for tracking source code during software development
**GitHub**: Company that provides hosting for software development version control using Git
**GUI**: Graphical user interface
**HIPAA**: Health Insurance Portability And Accountability Act Of 1996
**Metadata**: Data about data, or data which further describes the properties, qualities, and/or quantities of other data
**MHC**: My Healthcare, fictional insurance company used for this project
**Slack**: Proprietary business communication platform that features chat and file sharing
**SQLite**: A database that operates directly from library function calls, without a separate process or server
**Tag**: A string without spaces which provides categorical information about its object
**UML**: Unified modeling language

===
1.4. Overview

Contemporary businesses generate vast amounts of digital information, including documentation for business processes, customer lists, accounting spreadsheets, and more. Efficiently accessing this data, however, can be a problem: only filenames and some filesystem-specific metadata are easily searchable and systems that add information or tags directly to files can cause integrity problems. Additionally, modifications to the files may not be acceptable due to regulatory or other requirements. Clearly, a different solution is required.

Our tag-based file manager, TagIt.FM, stores the metadata in the form of custom tags in a separate database. Instead of working directly in the limited file manager of an operating system, we will offer a clean user interface that can sort based on any number of user-selected tags. The program searches and opens with the most recent search displayed to ensure continuity and clarity.

===
1.5. Business Context

In today's world, providing the best customer experience is as important as getting a new customer. MHC is serving millions of people from infancy, through their working lives, and into retirement. Their mission is to help people live healthier, and make the healthcare system work better for everyone. They follow HIPAA regulations to protect customer's data and privacy. They value customer satisfaction and the quality of customer experience.

MHC maintains policyholder data on all of their customers in a database, including personal information, like social security number and date of birth. Records are maintained by MHC of their customers' medical history, doctor's and hospital visits, prescription medication, surgeries, etc. This information gets updated at minimum annually as the policyholder/patient medical information changes.

The data is stored internally at the organization in a database and policy holders are only allowed to access their own information. As this information will be used by the employees at MHC, the business needs to keep track of all these records.

TagIt.FM can be used by any organization that has a database. It can be used to search customer information, user information, medical history, personal data, or even recent tag searches the employee has performed. The software can be used to retrieve any information quickly and effectively.

The tag-based file manager will address issues of misplaced documents or forgotten file names. For instance, when an employee searches the database for changes in the recent medical history of a customer, they can create a file tag based on the customer's name or medications that are stored in the database. Another employee can obtain the same information if she or he wants to access the same customer's medical history using any of the tags associated with the customer's file. TagIt.FM will provide solutions to make everyday access to business information simpler and more intuitive

+++
2. General Description

===
2.1. Product Features/Functions

TagIt.FM creates a tag-based file manager that stores metadata, in the form of custom tags, in a separate database. Instead of working directly in an operating system's limited file manager, the product will offer a clean user interface that can sort based on any number of user-selected tags. The program will remember previous searches and open with the most recent search displayed to ensure continuity and clarity. It will provide some basic tags and instructions to get users started but otherwise aims at being "invisible", allowing businesses to instantly search, sort, and access important data. 

The database will be loaded with business-critical features including management controls that restrict tag creation and file tagging to specific groups or users to prevent confusion or abuse. Each tag will include an optional description, also protected within the database. Because tags are stored inside the database, they automatically come with the key benefits of ACID. Every operation is guaranteed not to harm the integrity of either the main database or the filesystem.

TagIt.FM will address the shortcomings of other solutions. Business-critical files will never be modified in any way nor will any filenames change. Users will always be able to make use of this system side-by-side with legacy file managing systems, which simplifies administration. In short, the tag-based file manager will create new opportunities for organization and collaboration by making everyday access to business information simpler, easier, and more intuitive. This product will help employees at MHC search for any customer records more accurately. TagIt.FM will be extremely beneficial for any customer care representative, who needs to find out the customer information quickly so that they can serve the customer efficiently.

===
2.2. User Characteristics

Our client, MHC serves millions of people from infancy to into retirement. They store important customer information internally for their own use. Most of the policy members call the customer care line with questions regards to their benefits, claims, billing, sometimes even ask for details of the specialist who participates in their network.

This information would be used by the employees at MHC. Most of the policy members call the customer care with questions regard to their benefits, claims, billing, or with questions regarding specialists who are members of the insurance network.

Employees, especially the customer care representatives, need to provide this information within a certain time frame. According to company customer service policy, they cannot keep the customer on hold for more than 3 min. The employee must be able to access this information in a fast and accurate manner. They need technology that can pull information based on a person's recent medical history changes or on other recent inquiries. MHC will benefit from an application that creates file tags based on custom criteria and search history so that the information can be accessed quickly.

2.3. General Constraints

1. The software must be operated on Windows or Linux operating systems.
2. The maximum size of a database file is 2 147 483 646 pages.

===
2.4. Collaboration Tools

---
2.4.1. Communication

The team has been using Slack and GitHub as the primary collaboration tools; Slack is mainly used for communication. The project manager has created channels based on the project deliverables. Discussions regarding the specific topics related to each deliverable on the respective channel. The main channel is used for discussing general topics and communicating with the team. The meeting channel is used for bi-weekly team meeting.

---
2.4.2. Document Storage And Control

All project documents are stored in a GitHub repository. The project manager has given permission to all team members to commit changes to these documents.

---
2.4.3. File Sharing And Management

GitHub is used for storing and sharing project related files. The team repository contains all documentation that concerns the project.

---
2.4.4. Project Management

GitHub and Slack are used for project management. The readme document on GitHub contains the to-do list with current tasks and organized by assigned team roles. All the team members are required to read the list and complete tasks by the due date. Slack is used for bi-weekly meetings, questions, and discussion.

---
2.4.5. Version Control Of Documents

As progress is made to the project, all the members keep updating their files in the GitHub repository. GitHub allows for reverting documents back to previous versions and to see changes that have been made.

2.4.6. Strengths and Weaknesses

The biggest strength of our group is constant communication and updates. Everyone in the team is extremely responsible for their work. Our Slack communication channel is always open 24 x 7 for this continuous discussion and exchange of thoughts. Although this is an asynchronous form of communication, we are very able to collaborate methodically.

As far as the weakness are concerned, our team does not do synchronous communication like video chat or conference calls. We would get instant feedback while using video chat or a conference call. Sometimes, we may not be able to correclty analyze what another person's reaction to our thoughts is, using asynchronous communication. Although each team member conveys their feelings through emoji's and offers responses, it is not as effective as watching the person's reaction. This can leave some emotional distance between the team members. This is might be the only weakness we could find in collaboration within with our team.

+++
3. Business Requirements

===
3.1. B1

MHC wants to maintain its quality of service by providing the best customer care in a timely manner.

===
3.2. B2

Employees at MHC want to search the files with filename, filetype, and/or location efficiently so that they can answer the customers effectively.

===
3.4. B3

The application must not have direct access to any confidential data or documents; rather, tags must be attached to files in a way that does not require read permissions to access the file tags.

+++
4.Functional Requirements

===
4.1. F1

Customer care representatives must be able to retrieve the policy holder information using a keyword from their database.

===
4.4. F2

The file tags must not allow employees to access documents that they do not have permissions to access.

===
4.6. F3

The application must require an appropriate employee login in order to create, update and delete tags.

+++
5. Interface Requirements

===
5.1 User Interfaces

---
5.1.1. GUI

~~~~~
5.1.1.3. I1

The employees at MHC must log to TagIt.FM in via it's GUI in order to manage tags.

~~~~~
5.1.1.1. I2

The GUI must have a conspicuous search feature that employees can use when searching for tags.

~~~~~
5.1.1.1. I3

The GUI must provide an option to allow/disallow employees from searching within subdirectories.

~~~~~
5.1.1.2. I4

Employees must be able to change the target search directory in the GUI before any search so they can expand or narrow the results.

~~~~~
5.1.1.4. I5

The GUI must include a history option that lists recently searched tags so that employees do not need to remember their past searches.

---
5.1.2. CLI - N/A

Description: In order to make the application user-friendly, TagIt.FM will be using a GUI as the primary interface. The software will not be using a CLI at this time.

---
5.1.3. API - N/A

Decription: TagIt.FM will not use an API because all the features are exposed in the GUI and support for third-party add-ons will not be available at this time.

===
5.2. Hardware Interfaces

---
5.2.1. I6

The application must be available on x86 systems because most devices at MHC use these types of operating systems.

===
5.3. Communication Interfaces

---
5.3.1 I7

The application must use Local Area Network access to facilitate communication between the clients and the server.

===
5.4. Software Interfaces

---
5.4.1. I8

The application must interface with the filesystems of Microsoft Windows and Linux because they are commonly used by employees at MHC.

+++
6. Performance Requirements

===
6.1. P1

The application must be able to pull and display files based on search criteria—with a base time of no more than 2 seconds and 0.5 seconds extra allowed for each tag used in the search—in order to provide information to the customers efficiently and effectively.

===
6.2. P2

The application must not lock directories while employees are performing searches because it would reduce their ability to provide quality service.

+++
7. Other Non-Functional Attributes

===
7.1. Security

---
7.1.1. N1

The application must not make changes to any file or file's metadata because it violates data confidentiality and integrity.

===
7.2. Reliability

---
7.2.1. N2

The employees at MHC must be able to access the application 24 x 7 because the company provides service to customers at all hours.

===
7.3. Maintainability

===

7.3.2. N3

The application must have no external dependencies because the company wants to maintain the security of customer data and the ability to safely upgrade the application in the future.

===
7.4. Portability

---
7.4.1. N4

In order to increase efficiency, the application must be able to support several hundred employees' abilities to create, access, and modify file tags simultaneously.

===
7.5. Resource Utilization

---
7.5.1. N5

The application must keep all tag data updated in realtime as tags are created, read, and/or deleted so that all employees can retrieve accurate search results.

===
7.6. Serviceability

+++
8. Operational Scenarios

===
8.1. Scenario A

Manager wants to know, due to COVID-19, how many customers with age of 60 or above have visited the hospital (B2, F1, N5).

===
8.2. Scenario B

Customer wants to know what his benefits are if he has another knee surgery for his torn ACL (B1, B2, F1, N5).

===
8.3. Scenario C

Manager wants to pull data of people who have recently ordered prescription for chloroquine phosphate (B2, F2, P2)

+++
9. Use Case And User Stories

===
9.1. Use Case

---
9.1.1. B1 UC01

**Title**: Customer interaction
**Primary actor**: Employee
**Success scenario**: An employee, in this case, a customer service representative receives call from customer. The customer is identified and poses a question to the representative. The customer service representative locates applicable plans and benefits. Customer service representative provides estimate to customer.

---
9.1.2. B2 UC01

**Title**: Employee file search
**Primary actor**: Employee
**Success scenario**: An employee logs in to a PC, and subsequently logs in to TagIt.FM. The employee starts a tag search. The application lists recent tags based on search history. The application creates a list of results based on finalized search. Employee views found records.

---
9.1.3. Use Case Diagram

The following diagram illustrates the use cases described in the previous two sections. The first use case shows a customer service representative interacting with a customer, and the second shows an employee searching TagIt.FM for specific tags.

https://github.com/Bizzlebin/TEAM/blob/master/use_case.png

===
9.2. User Stories

---
9.2.1. User Stories Per Business Requirement

**B1US01**: As a customer care representative, I need quick access to policy information, benefits and estimates to share with the customer.
**B2US01**: As a customer care representative, I want to access all case related documents while on the phone with the customer.
**B3US01**: As legal counsel, I need to be able to audit the software to ensure confidentiality of all customer records.

---
9.1.2. User Stories Per Functional Requirement

**F1US01**: As a customer care representative, I need to find information using a simple search, so I can quickly relay the information to the customer.
**F2US01**: As legal counsel, I need to be able to confirm that tags do not allow employees access to documents past their clearance level.
**F3US01**: As a manager, I need to create specialized tags for my employees to ensure they can find all documents that they need.

+++
10. Sequence Diagrams

===
10.1. Sequence Diagram Of Requirements I2 And N5

The following sequence diagram describes an employee using the TagIt.FM application search feature to find files that contain associated with specific tags. The employee enters the desired tag(s) into the GUI search feature and the information is relayed to the database, which locates the associated files and returns them to the GUI to be displayed as a list to the employee. The employee can then view any of the files that matched the entered tag criteria.

https://github.com/Bizzlebin/TEAM/blob/master/wk_4_uml_diagram.vpd.png

===
10.2. Sequence Diagram Of Requirement N2

The N2 requirement states that the application must be available 24 x 7. The following sequence diagram is an excerpt of the search process showing how the TagIt.FM server will contiuously communicate with the database containing the tag information, in order to satisfy the N2 requirement.

https://github.com/Bizzlebin/TEAM/blob/master/wk_4_uml_diagram_loopfragment2.vpd.png

+++
11. Appendices

===
11.1. M[o]SC[o]W

The M[o]SC[o]W method is a system commonly used to prioritize requirements for features in a software application. The requirements listed in the following sections are a historical reference of requirements and features suggested during an initial brainstorming session of TEAM. Most of the following requirements were not chosen to be included in the finalized requirements document for TagIt.FM as they would not meet the needs of the client.

---
11.1.1. Must

**M1**: MHC wants to maintain its quality of service by providing best customer care in a timely manner.
**M2**: MHC wants to maintain all its customer data so that it can be searched efficiently and effectively.
**M3**: Software must find files when filename, filetype, and/or location are unknown.
**M4**: Software shall not have direct access to any confidential data or documents; rather, tags shall be attached to files in a way that does not require read permissions.
**M5**: Customer care representatives shall be able to retrieve the policy holder information using a keyword from their database.
**M6**: Insurance agents shall be able to log in to the system and find related documents by using keywords associated with the client or project.
**M7**: Managers shall be able to create additional tags that their group requires.
**M8**: Tags shall not allow users to access documents that they do not have permissions to access.
**M9**: Software will be able to pull and display files based on search criteria in a reasonable amount of time: less than 5 seconds.
**M10**: The application shall make no changes to any file or file's metadata.
**M11**: GUI will include a centralized (easily spotted) search bar for the searching of tags.
**M12**: Main pane must be able to change target directory.
**M13**: The application will be available on x86 systems.
**M14**: The application will use local area network access to facilitate communication between the clients and server.
**M15**: The application will need to interface with the filesystems of Microsoft Windows and Linux.
**M16**: Software will be relatively lightweight and will not affect other business-necessary operations that must also be performed.
**M17*: Tags must be able to be removed without unintended side effects.

---
11.1.2. Should

**S1**: Administrator login shall be required to manage the tag database.
**S2**: Relevant employee login will be required to create, update, and delete tags.
**S3**: System-assigned tags shall only be deleted by managers, while agent-assigned tags may be deleted by agent.
**S4**: Access to user interface for managing personal tags shall require log in.
**S5**: GUI will include history tab for recently searched and accessed tags/files.
**S6**: Secondary pane must contain an option to allow/disallow searching subdirectories.
**S7**: System should be available 24 x 7 for all users.
**S8**: Software must be able to support several hundred user's/employee's ability to create, access, and modify tags simultaneously.
**S9**: Software must keep all tags up to date in real time as they are created, updated, and/or deleted.
**S10**: System should not have any external dependencies.
**S11**: Database system should perform database maintenance every midnight.
**S12**: Files that have been returned from a tag search will have additional methods available to sort based on filetype.
**S13**: Customer hold-times during peak hours shall be 5 minutes or less.

---
11.1.3. Could

**C1**: System shall always cross-reference customer ID before assigning customer specific tags to any documents.
**C2**: The system shall start searching within 2 seconds after a tag match is guessed but the user is still typing.
**C3**: Customers shall not be able to access the tag system.
**C4**: Windows login shall be recognized when adding tags to shared files or folders.
**C5**: Customer care representative shall be able to retrieve all the case history by searching caseId or tag number.
**C6**: The application shall produce regular reports on most popular tags and searches.
**C7**: Tags shall stay assigned to document if moved to a different project or directory.
**C8**: Files that have been found during search will support drag and drop.
**C9**: User interface for adding personal tags shall be on mouse-right-click drop down.
**C10**: User interface shall offer options for personalized color schemes for tags.

---
11.1.4. Won't

**W1**: Software shall consider HIPAA regulations and all data and transfers of data shall be completely secure.
**W2**: The application must be able to support users effectively organizing files.
**W3**: System shall maintain a user portal for policy members using customer specific tags.
**W4**: System shall create client and project specific tags when a new client or project is created.
**W5**: To ensure confidentiality, if a customer tag is present on a document, a document move must be approved by a manager or group leader.
**W6**: Project relevant tags shall be assigned to any document that is added to a tagged project folder.
**W7**: All customer correspondence shall be compiled and mailed out the same business day as customer request was made.
**W8**: When a case is closed, all relevant documents shall be transferred to customer file within one business day.
**W9**: System shall assign reward points to policy holder based on their medical history and lifestyle.

===
11.2. Procedures For Project Requirement Changes

To submit a change request, a team member must create a numbered section in the change_requests.txt file. This section must contain, in description list items, the status (open), the ID of the requirement, the updated requirement text, the rationale, the requester's name, and the request's open date as follows:

"""
===
0. Example Change

**Status**: Open
**Requirement ID**: [ID of requirement (eg, B1); use the official req code, not the M[o]SC[o]W numbering; make a new ID if the requirement is new]
**Requirement text**: [Full text of the proposed change; for new requirements, simply make a new text]
**Rationale**: [*Briefly* describe why the change should be made]
**Requester**: [Name]
**Open date**: [ISO date]
"""

During the next team meeting, the change control board must vote on all active items. The status must be changed to "Closed" by the CA (customer advocate). The CA must add in the rest of the fields—namely the close date (the date of the vote) and the result (with description according their judgment, if it was not discussed at the time of the vote)—and then update the SRS itself with the new requirement, if approved. The format is:

"""
**Status**: Closed
...
**Close date**: [ISO date]
**Result**: Accepted|Rejected: [brief description of why the change was accepted or rejected, including if the requirement text in the change request was modified]
"""

===
11.3. Schedule

===
11.4. Requirements Traceability Matrix

"""
Req ID, Parent ID, MoSCoW, Test Case ID(s)

B1,     None,      Must,   TC0001
B2,     None,      Must,   TC0002
B3,     None,      Must,   TC0003
F1,     B2,        Must,   TC0004
F2,     B3,        Must,   TC0005
F3,     B3,        Should, TC0006
I1,     F1,        Must,   TC0007
I2,     F1,        Must,   TC0008
I3,     F2,        Should, TC0009
I4,     F1,        Must,   TC0010
I5,     F2,        Should, TC0011
I6,     B2,        Must,   TC0012
I7,     B1,        Must,   TC0013
I8,     B2,        Must,   TC0014
P1,     B1,        Must,   TC0015
P2,     F1,        Must,   TC0016
N1,     F1,        Must,   TC0017
N2,     F1,        Should, TC0018
N3,     F2,        Should, TC0019
N4,     F1,        Should, TC0020
N5,     F1,        Should, TC0021
"""

===
11.5. Verification And Validation Testing Document

"""
Test Case, Role,          Status, Tester,   Description

TC0001,    Client,        Null,   SJ (CA),  Enter the valid tag and check to see if the results returned within expected time.
TC0002,    Client,        Null,   SJ (CA),  Validate if all file tags are searched within expected time.
TC0003,    Client,        Null,   AM (DS),  Enter valid tag and verify if all returned results are within the scope of the current user's permissions.
TC0004,    Client,        Null,   JT (PM),  Enter valid tag and check if results are returned.
TC0005,    Client,        Null,   JT (PM),  Enter valid tag in restricted directory and check if no results are returned.
TC0006,    Client,        Null,   JT (PM),  Attempt to create, update, and delete a tag while not logged in to ensure it is not possible.
TC0007,    Client,        Null,   SB (LT),  Validate if the user type account has been created to manage tags.
TC0008,    Client,        Null,   SB (LT),  Validate if the search bar can be seen and allow the user to search.
TC0009,    Client,        Null,   SB (LT),  Validate if the user can process the option in the pane.
TC0010,    Server,        Null,   SB (LT),  Validate if the change target control accepts the request of the user and switches the directory.
TC0011,    Server,        Null,   SB (LT),  Validate if the user can access the history data.
TC0012,    Client,        Null,   SB (LT),  Validate whether user type has the required computer system.
TC0013,    Server,        Null,   SB (LT),  Validate if any requests to the server did not successfully pass.
TC0014,    Client,        Null,   SB (LT),  Validate whether usertype has the required filesystem.
TC0015,    Client,        Null,   ZW (LSD), Validate that average search times remain below 5 seconds.
TC0016,    Client,        Null,   ZW (LSD), Validate that directories can still be accessed during searches.
TC0017,    Client,        Null,   JT (PM),  Compare file pre and post-tagging; are hashes the same?
TC0018,    Server,        Null,   JT (PM),  Record downtime over an arbitrary period; was it 0 s?
TC0019,    Client/Server, Null,   JT (PM),  Regex all imported modules; is the set of modules a subset of Python standard library modules?
TC0020,    Server,        Null,   JT (PM),  Does server pass I/O stress test simulating 200 users?
TC0021,    Client,        Null,   JT (PM),  Does the client have a method to fetch current tag data before every search executes?
"""
