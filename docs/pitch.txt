Pitch

https://github.com/bizzlebin/team/docs/pitch.txt

***

By Jeremiah Thomas, et al

***

Created on 2020-05-27

Edited on 2020-05-28

///
Our Pitch Ideas got a little far afield of the original goal: to ensure we communicate how our project idea meets the project goals (real business need, database, etc). Rather, it started getting into a lot of topics that will be covered in our SRS, or software requirements specification. This is not necessarily a bad thing—we now have a head start on the SRS!—but I had to *significantly* trim down some of the ideas to make this formal pitch document. As you make your changes, please keep in mind the scope of this pitch—it is not an SRS but more of a memo to corporate executives to "sell" the project—and make sure it retains a clear flow and proper grammar. I've just provided a solid first draft since I don't have any other, singular formal deliverable.

Remember to ask to clarification on Slack at any time. Use the main channel, if possible, so we can all benefit from the answers. I am monitoring it and will respond to any requests as soon as I am able—that usually means pretty quickly, if it is a weekday afternoon/evening! If you have something larger in scope that needs my attention, like a completely new idea (ie, thought collaboration), that is a better target for [non-group] e-mail or private Slack message.
\\\

+++

Nearly every business outside of the developing world stores information digitally. This includes documentation for business processes, customer lists, accounting spreadsheets, and more. Much of this rich trove of data, however, can only be searched in the most basic of manners: only filenames and some filesystem-specific metadata are easily indexable, even on contemporary operating systems. But from a business perspective, the data carries far more meaning: each file may have relevance across different departments, data may not be adequately represented by a short filename or title, and information needs to be rapidly sorted according to unique and ever-changing criteria throughout the course of the day. What businesses need, therefore, is a way to store and sort files according to arbitrary criteria.

Some solutions to this problem add information directly to files. This is problematic, because such metadata is easily lost or corrupted. Certain filesystems or file formats may not be able to properly implement extraneous metadata. Additionally this approach ultimately changes the file, which is not acceptable from either a confidentiality, integrity, or access control perspective. Another solution is to add metadata in the form of tags to the filename. Unfortunately, this suffers many of the same problems: integrity violations, ease of corruption, and limited support for long and/or complex filenames on legacy systems. It also adds problems of its own: with filenames constantly changing, it becomes increasingly difficult to manage, track, or even find files through traditional means. Clearly, a new solution is required.

Our proposal is to create a tag-based file manager which stores the metadata, in the form of arbitrary tags, in a separate database. Instead of working directly in an operating system's limited file manager, we will offer a clean UI that has the ability to sort based on any number of selected tags—and provide hints to users based on their department. The program will remember user searches and open up with the last-used search displayed in order to ensure continuity and clarity. It will provide some basic tags and instruction to get users started but otherwise aim at being "invisible", allowing businesses to quickly search, sort, and access important data. If possible, the program will even start searching while the user is still typing, providing immediate, critical feedback.

The database itself will also be fully-featured, with business-essential features. We will add the ability to separately restrict tag creation and file tagging to specific groups or users in order to prevent confusion or abuse. Each tag will include an optional description, also protected within the database, which can be used to further illustrate each tag's meaning and usage while aiding in tag administration. And because all of this is stored inside a database, tagging operations automatically come with the key benefits of ACID: atomicity, consistency, isolation, durability. Every operation is guaranteed not to harm the integrity of either the database or the filesystem.

Taken together, the new tag-based file manager will address all the shortcomings of other solutions. No business-critical files will be modified in any way nor will any filenames change. No change in the file creation process will slow down the business or overwhelm users. Users will always be able to make use of this system side-by-side with the legacy file managers, simplifying administration. In short, our tag-based file manager will create new opportunities for organization and collaboration by making everyday access to business information simpler, easier, and more intuitive.

I want to further add to the design element of the UI as i feel in the pitch it did not touch upon it much. To be able to sort the elements in the seperate database the UI will need seperate rows and columns that will be responsible for organizing those files. Lets say the user wants to seperate any of the files that are independent of the file manager and he/she needs to know where it shall be stored, the user can then pick what row and column it needs to be added to and complete that task (Stavros Bannoura).
