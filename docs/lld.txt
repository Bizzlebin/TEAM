LLD | TEAM Exists As Metonym

https://github.com/bizzlebin/team/blob/master/docs/lld.txt

***

By Zachary Wawrzaszek, et al

***

Created on 2020-06-15

Updated on 2020-07-08

Released on 2020-07-08

+++
1. Introduction

===
1.1. Purpose

The client, MHC, is an insurance company and they need an application that can quickly locate important medical and financial documents of varying filetype. Customer service representatives, especially, need a way to simplify the search process and reduce the amount of time that they must keep a customer on hold. This, in turn, improves the mood of the customer and decreases frustrations for the employee.

The purpose of this project, therefore, is to address those concerns: the new, intuitive TagIt.FM application will improve and accelerate the process of searching for files in a computer's file directory. This document will describe the detailed, low-level design (LLD) of TagIt.FM, including the basic structure of the database tables, the class methods, and the program flow as it pertains to the user side of the program. The LLD document will be used by the developers to guide the development process of the application until it becomes a fully-functioning product.

===
1.2. Scope Of This Document

The scope of this document is the low-level design details from the user leg of the program hierarchy: the classes that will handle main flow of a program from the perspective of the user. It will include all the object-oriented design details, like describing class methods, and provide pseudocode to help illustrate some of the basic code flow and functionality. It will discuss the inheritance hierarchies that will be involved with the user classes, like what the parent classes will oversee and what the child classes will inherit from them.

The database component of TagIt.FM is described in the last chapter of the low-level design document. This chapter will include the database tables, their relationships, and their fields. There will also be a description of the normalization process of the application database, which will ensure that there are no redundancies in the data.

===
1.3. Definitions, Acronyms, And Abbreviations

**3NF**: Third normal form
**Child**: A class that inherits attributes and/or methods
**Class*: A user-defined blueprint or prototype from which all objects are created that contains the set of properties and methods that an object of that type has
**CURD**: Create, update, read, and delete
**Foreign key**: A set of attributes that references a primary key
**Inheritance**: A mechanism where a class is derived from another class 
**LAN**: Local area network
**Library**: Reusable code, including functions, that can be used for common programming tasks
**Normalization**: Database normalization is the process of structuring a relational database in accordance with a series of so-called normal forms in order to reduce data redundancy and improve data integrity
**Object**: An abstract data type that contain multiple properties and methods, or even other objects as defined by its class
**Parent**: The top-level class from which a child class inherits attributes and methods
**Primary key**: A specific choice of attributes that uniquely specify a tuple in a relation
**Pseudocode**: Informal high-level description of the operating principle of a computer program using the structural convention of a programming language but intended for human reading
**SQL**: Structured query language: a language used in programming that is designed for data held in a relational database management system
**SQLite**: A database that operates directly from library function calls, without a separate process or server
**Tag**: A string without spaces which provides categorical information about its object
**UML**: Unified modeling language

+++
2. Object-Oriented Design

===
2.1. Classes

The classes are illustrated using pseudocode in Appendix A. This provides details on how the Main class, the User class and the User child classes will be set up, including their purpose, properties, constructors, and methods. 

===
2.2. Detailed Inheritance Hierarchies

Pictured below is an inheritance hierarchy for the application with details for the Main and User class leg. It also displays how the rest of the classes and database will interact with each other.

https://github.com/Bizzlebin/TEAM/blob/master/lld_class_diagram.PNG

===
2.3. Refinement Of Parent Classes To Child Classes

The user portion of TagIT.FM's design hierarchy will make use of four classes (including Main), with two of those being child classes. The Main class will be used to manage the entire client side of the application and will thus instantiate and manage User objects. The next class is User, which has two child classes; if there is a need for finer-grained user control in future versions of the application, this design will allow for the rapid implementation of new user subclasses with different combinations of methods and permissions.

The three levels of user classes in the application design handle different levels of users, therefore the structure is designed to use the User class as the parent class. The child class Mid_user will inherit directly from User, and High_user will inherit from Mid_user. The purpose of this inheritance is splitting the users into categories depending on their job roles, creating certain roles with dependent permissions within the application for easy auditing. The User class, as the parent class, contains the basic attributes and methods that are inherited by the two child classes. The Mid_user class, inherits from the User class and adds new methods for creating and deleting tags. Finally, the High_user class inherits from the Mid_user class and adds new methods for creating and deleting user accounts and for changing the current permission level on accounts.

===
2.4. Object Composition

The principles of object composition were not a part of this project's design process. Object composition describes a class that references one or more objects of other classes in instance variables and models a "has a" association between objects. TEAM wanted to take a different route in its design development and there are no instances of object composition used in this part of the project.

+++
3. Database Design

===
3.1. Chosen Database

TagIt.FM will be designed to run using a SQLite database. The SQLite database engine is small and fast, which makes it unlikely to impact any business-critical functions or slow down the LAN. SQLite works across a wide variety of operating systems, making it possible for MHC to use the application on any existing hardware. The database content will be updated continuously and atomically, which helps protect the database against losses in the event of a power outage or crash.

The SQLite database will store the user identification parameters, group permissions, filename and tag relations, and user histories for TagIt.FM.

===
3.2. Tables And Relationships

The database table will be set up in 3NF using primary keys as the only functional dependencies in the database. There will be no other transitive dependencies in the table as the five related tables will be kept separated to achieve 3NF.

The User History table will be separated from the User table: it will organize the user history as a linking table that has two foreign keys, one from User and the other from Tag, thus following 3NF. The User History table can then add users separately from the tags and delete tags without affecting the users. The User table will be normalized into columns containing the user information: names, dates, and cryptographic data. This table will connect to the Group table using a foreign key. The Group table will include information that involves CURD tasks for tags, users, and groups. The Tag table will only have a primary key and no foreign keys, including only the most basic of tag data: name and description. The File Tag table will include one primary key and one foreign key, linking it back to Tag. The File Tag table will contain all the file information that is used to organize the tags based on the file path, the name, and the extension type. This table will allow administrators to delete a tag on an individual file without affecting the tag on other files.

---
3.2.1. User

The primary key of the User table will be id(int); the table will store information for the user in six attributes that handle the account data. The data attributes in the User table will be name(str), creation_date(date), salt(str), hash(str), update_date(date), and the foreign key group.id(int). The username of the user will be assigned to name, and the account creation date to creation_date. The salt and hash attributes will be used to handle password encryption. Each password will have a unique hash to strengthen the encoding, which will provide a more secure profile. The update_date attribute will record when the user modified their password last. The foreign key used in the User table will be group.id, which is the relation between the User table and the Group table that will handle permissions for the CURD tasks of the tags, users, and groups.

---
3.2.2. User History

The User History table will have a primary key of id(int). This table will save modifications to tags and its responsibilities will include data per user based on which tags were last searched for. The User History table will include the count(int) attribute, which is used in conjunction with the app to keep track of an arbitrarily-sized search history. This linking table will include two foreign keys, user.id(int) and tag.id(int), which will be connected to the User table and the Tag table, respectively. The foreign keys will allow the search history to be maintained without duplication of any data and thus without violation of normal form.

---
3.2.3. File Tag

The primary responsibility of the File Tag table will be to handle the metadata that will be associated with any given file tag. It will join with the Tag table via the foreign key tag.id(int), which provides the tag information. The table will include three more attributes, all of which are specific to the individual file being tagged: file_path(str), file_name(str), and file_ext(str). The file_path attribute will include the directory path to a tagged the file, up to and including the root drive, when applicable. The file_name(str) will contain the name of the file. The file_ext(str) attribute will hold the extension associated with the tagged file, if present.

---
3.2.4. Tag

The Tag table will contain id(int) as its primary key. It will have only two more attributes: name(str) and description(str), which will contain the name and detailed description of the tag. The Tag table has one primary key and no foreign key because it will not be modified by other database objects. Rather, it will be used in relation to the User History and File Tag tables. Following normal form, this will allow multiple files to share the same tag. Similarly, multiple entries in multiple user histories will be able to contain the same tag, too.

---
3.2.5. Group

The Group table will be primarily involved with the CURD roles. The primary key of the Group table is id(int), but it also has the name(str) attribute that will hold the name of created user groups. All the permissions for CURD operations on tags, users, and groups will be stored as Boolean data types in order to make the database faster and the application more efficient. Though this version of the application will only include a regular user, a mid-level user, and a high-level user, the Group table is set up to allow for easy additions of new groups in later iterations. Once a new class is set up, the Group table will store and verify what access level a user of that class has before authorizing changes to tags, to users, or to groups.

+++
Appendix A

https://github.com/Bizzlebin/TEAM/blob/master/pseudocode.txt