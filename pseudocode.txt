Pseudocode

https://github.com/bizzlebin/team/blob/master/pseudocode.txt

***

By Jeremiah Thomas, et al

***

Created on 2020-06-29

Updated on 2020-06-30

+++

///
I've removed the usual containing preformatted blockquotes around the code in order to trigger syntax highlighting. In a proper, finished document, the quotes must be added back in.

â€”Jeremiah
\\\

class Main()
	'''
	The main controller, which initializes the app and calls other class constructors.

	- gui: obj
	- https_client: obj
	- user: obj

	- init(): no returns
	+ create_gui(): gui: obj
	+ create_https_client(): https_client: obj
	+ create_user(): user: obj
	+ read_gui(): gui: obj
	+ read_https_client(): https_client: obj
	+ read_user(): user: obj
	'''

	function init()
		'''
		Initialize the GUI, HTTPS server, and user on instantiation.

		No returns
		'''

		create_gui()
		create_https_client()
		create_user()

	function create_gui()
		'''
		Create the app's GUI and update the associated private variable.

		No returns
		'''

		gui = new Gui()

	function create_https_client()
		'''
		Create the app's HTTPS client and update the associated private variable.

		No returns
		'''

		https_client = new Https_client()

	function create_user()
		'''
		Create the app's user and update the associated private variable.

		No returns
		'''

		user = new User()

	function read_gui()
		'''
		Read the memory location of the gui object.

		Return gui: obj
		'''

		return gui

	function read_https_client()
		'''
		Read the memory location of the HTTPS client object.

		Return https_client: obj
		'''

		return https_client

	function read_user(gui: obj)
		'''
		Read the memory location of the user object from the GUI.

		Return user: obj
		'''

		return user

class User()
	'''
	The basic user, with methods shared by higher-privileged users.

	- id: int
	- name: str

	- init(): no returns
	- login(name: str, password: str): no returns
	- create_file_tag(id: int, file_path: str, file_name: str, file_ext: str; tag: obj): no returns
	- delete_file_tag(id: int, file_path: str, file_name: str, file_ext: str; tag: obj): no returns
	- read_file_tags(id: int, file_path: str, subdir: bool, tag: obj): no returns
	- read_history(id: int): no returns
	- read_id() id: int
	'''
	'''
	All display will be handled by the GUI, hence nothing needs to be returned directly by/to the user.
	'''
		
	function init(name: str, password: str)
		'''
		Initialize the user object, calling login().

		No returns
		'''

		name = prompt('Username: ')
		password = prompt('Password: ').censor
		
		if name = None or password = None
			return 
		else:
			login(name, password)

	function login(name: str, password: str)
		'''
		Log the user in with a given name and password, else destroy the user object.

		No returns
		'''

		client = main.read_https_client()

		response = client.send_request(login, (name, password))

		if response = int
			id = response
		else
			self.destroy

	function create_file_tag(id: int, file_path: str, file_name: str, file_ext: str; tag: obj)
		'''
		Create a file tag on a given file using a valid tag object.

		No returns
		'''

		gui = main.read_gui()

		if id
			gui.create_file_tag(file_path, file_name, file_ext, tag)

	function delete_file_tag(id: int, file_path: str, file_name: str, file_ext: str; tag: obj)
		'''
		Delete a file tag on a given file using a valid tag object.

		No returns
		'''

		gui = main.read_gui()

		if id
			gui.delete_file_tag(file_path, file_name, file_ext, tag)

	function read_file_tags(id: int, file_path: str, tag: obj)
		'''
		Read the file tags in a given dir using a valid tag object.

		No returns
		'''

		gui = main.read_gui()

		if id
			gui.read_file_tags(file_path, tag)

	function read_history(id: int)
		'''
		Read the user's history.

		No returns
		'''

		gui = main.read_gui()

		if id
			gui.read_history(int)
			
	function read_id()
		'''
		Read the user ID from the user object.

		Return id: int
		'''
		
		return id

class Mid_user(User)
	'''
	The mid-level user, with additional methods.

	- create_tag(id: int, name: str; description: str): no returns
	- delete_tag(id: int, tag: obj): no returns
	'''
	'''
	All tag objects are handled by the GUI, too, hence nothing needs to be returned directly by/to the user.
	'''

	function create_tag(id: int, name: str; description: str = 'NULL')
		'''
		Create a tag object with a name and optional description.

		No returns
		'''

		gui = main.read_gui()

		if id
			name = prompt('Tag name: ')
			description = prompt('Tag description: ') OR 'NULL'
			gui.create_tag(name, description)

	function delete_tag(id: int, tag: obj)
		'''
		Delete a valid tag object.

		No returns
		'''

		gui = main.read_gui()

		if id
			gui.delete_tag(tag)

class High_user(Mid_user)
	'''
	The high-level user, with additional methods.

	- create_user(id: int, name: str; password: str): no returns
	- delete_user(id: int, user: obj): no returns
	- update_user_level(id: int, user: obj; level: str): no returns
	'''

	function create_user(id: int, name: str; password: str)
		'''
		Create a user with a given name and password.

		No returns
		'''
		
		User(name, password)
		 
	function delete_user(id: int, user: obj)
		'''
		Delete a valid user object.

		No returns
		'''
		
		client = main.read_https_client()

		if id
			client.send_request(delete_user, (user))
					
	function update_user_level(id: int, user: obj; level: str)
		'''
		Update a valid user object up or down to a given level (class).

		No returns
		'''
		
		client = main.read_https_client()
		
		if id
			client.send_request(update_user_level, (user, level))
						
